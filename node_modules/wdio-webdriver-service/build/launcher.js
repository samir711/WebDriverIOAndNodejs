'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _fsExtra = require('fs-extra');

var _fsExtra2 = _interopRequireDefault(_fsExtra);

var _getFilePath = require('./utils/getFilePath');

var _getFilePath2 = _interopRequireDefault(_getFilePath);

var _drivers = require('./utils/drivers');

var _child_process = require('child_process');

var _child_process2 = _interopRequireDefault(_child_process);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var DEFAULT_LOG_FILENAME = 'webdriver-log.txt';
var execFileOptions = {
    maxBuffer: 1024 * 1024 // increase default buffer size
};

var WebDriverLauncher = function () {
    function WebDriverLauncher() {
        _classCallCheck(this, WebDriverLauncher);

        this.webDriverLogs = null;
        this.logToStdout = false;
        this.webDriverKillProcess = true;
    }

    _createClass(WebDriverLauncher, [{
        key: 'onPrepare',
        value: function onPrepare(config) {
            var _this = this;

            if (!(0, _drivers.isValidDriverType)(config.webDriverType)) {
                return Promise.reject(new Error('webDriverType ' + config.webDriverType + ' is not valid'));
            }

            var binPath = (0, _drivers.getBinPath)(config.webDriverType);
            var webDriverArgs = ['--port=' + config.port];
            if (config.webDriverArgs) {
                webDriverArgs = webDriverArgs.concat(config.webDriverArgs);
            }
            this.webDriverLogs = config.webDriverLogs;
            this.logToStdout = config.logToStdout;
            if (config.webDriverKillProcess !== undefined) {
                this.webDriverKillProcess = config.webDriverKillProcess;
            }

            if (this.process) {
                return Promise.resolve('webdriver is already running, do not need to relaunch it again');
            }

            return new Promise(function (resolve, reject) {
                console.log('run webdriver for ' + config.webDriverType + ' with params: ', webDriverArgs);
                _this.process = _child_process2.default.execFile(binPath, webDriverArgs, execFileOptions, function (err, stdout, stderr) {
                    console.log(err, stdout, stderr);
                    if (err) return reject(err);
                });

                if (_this.process) {
                    if (typeof _this.webDriverLogs === 'string') {
                        _this._redirectLogStream();
                    }
                    resolve();
                }
            });
        }
    }, {
        key: 'onComplete',
        value: function onComplete() {
            if (this.webDriverKillProcess && this.process) {
                this.process.kill();
            }
        }
    }, {
        key: '_redirectLogStream',
        value: function _redirectLogStream() {
            var logFile = (0, _getFilePath2.default)(this.webDriverLogs, DEFAULT_LOG_FILENAME);

            // ensure file & directory exists
            _fsExtra2.default.ensureFileSync(logFile);
            var logStream = _fsExtra2.default.createWriteStream(logFile, { flags: 'w' });
            this.process.stdout.pipe(logStream);
            this.process.stderr.pipe(logStream);
        }
    }]);

    return WebDriverLauncher;
}();

exports.default = WebDriverLauncher;
